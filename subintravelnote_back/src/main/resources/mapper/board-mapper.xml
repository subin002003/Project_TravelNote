<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.board.model.dao.BoardDao">
  	
  	<!-- 전체 게시물 수 조회 -->
  	<select id="totalCount" resultType="int">
  		select count(*) from board where board_status = 1 and board_type = 1
  	</select>
  	
  	<!-- 전체 게시물 조회 -->
  	<select id="selectBoardList" resultType="board">  		
	  	select * from 
	  		(select rownum as rnum, b.* from 
	  			(select 
	  				board_no,
	  				board_writer,
	  				board_title,
	  				board_category,
	  				to_char(board_date,'yyyy-mm-dd') as board_date,
	  				board_readCount,
	  				like_count
	  				from board 
	  				where board_status = 1 and board_type = 1 
	  				order by board_no desc)b) 
	  				where rnum between #{start} and #{end}
  	</select>
  	
  	<!-- 검색된 게시물 수 조회 -->
	<select id="searchTotalCount" resultType="int">
	    select count(*) from board 
	    where board_status = 1 and board_type = 1 
	    <if test="searchFilter == 'title'">
	        and board_title like '%' || #{searchTerm} || '%'
	    </if>
	    <if test="searchFilter == 'writer'">
	        and board_writer like '%' || #{searchTerm} || '%'
	    </if>
	    <if test="searchFilter == 'category'">
	        and board_category like '%' || #{searchTerm} || '%'
	    </if>
	</select>
  	
  	
  	<!-- 검색된 게시물 조회 -->
	<select id="selectBoardSearchList" resultType="board">
	    select * from 
	    (
	        select rownum as rnum, b.* from 
	        (
	            select 
	                board_no,
	                board_writer,
	                board_title,
	                board_category,
	                to_char(board_date, 'yyyy-mm-dd') as board_date,
	                board_readCount,
	                like_count
	            from board 
	            where board_status = 1 and board_type = 1 
	            <if test="searchFilter == 'title'">
	                and board_title like '%' || #{searchTerm} || '%'
	            </if>
	            <if test="searchFilter == 'writer'">
	                and board_writer like '%' || #{searchTerm} || '%'
	            </if>
	            <if test="searchFilter == 'category'">
	                and board_category like '%' || #{searchTerm} || '%'
	            </if>
	            order by board_no desc) b) 
	    		where rnum between #{pi.start} and #{pi.end}
	</select>

  	<!-- 한 게시물 조회 -->
  	<select id="selectOneBoard" resultMap="getBoard">
		select 
			board_no,
			board_title,
			board_content,
			board_writer,
			board_status,
			board_readCount,
			board_category,
			like_count,
			to_char(board_date,'yyyy-mm-dd') as board_date
		from board where board_no=#{boardNo}
	</select>
	
	<!-- 게시물 번호로 파일 조회 -->
  	<select id="selectOneBoardFileList" resultType="boardFile">
  		select * from board_file where board_no=#{boardNo}
  	</select>
	
  	<resultMap type="board" id="getBoard">
	<result column="board_no" property="boardNo"/>
	<result column="board_title" property="boardTitle" />
	<result column="board_content" property="boardContent" />
	<result column="board_writer" property="boardWriter"/>
	<result column="board_status" property="boardStatus"/>
	<result column="board_date" property="boardDate"/>
	<result column="board_readCount" property="boardReadCount"/>
	<result column="board_category" property="boardCategory"/>
	<result column="like_count" property="likeCount"/>
	<collection property="fileList"
		 select="selectOneBoardFileList"
		 column="board_no"
		 javaType="java.util.List"
		 ofType="boardFile"
		></collection>
	</resultMap>
  	
  	<!-- 게시물 조회수 -->
	<update id="updateViewCount">
		update board
		set board_readCount = board_readCount + 1
		where board_no = #{boardNo}
	</update>
	
	<!-- id로 게시물 조회 -->
	<select id="selectBoardById" resultType="board">
		select * 
		from board 
		where board_no = #{boardNo}
	</select>
  	
  	<!-- 게시물 등록 -->
  	<insert id="insertBoard">
  		insert into board 
  		values (
	  		board_seq.nextval,
	  		#{boardWriter},
	  		#{boardTitle},
	  		#{boardContent},
	  		sysdate,
	  		#{boardCategory},
	  		0,
	  		1,
	  		1,
	  		0
  		)
		<selectKey resultType="int" keyProperty="boardNo" order="AFTER" >
			select max(board_no) from board
		</selectKey>
  	</insert>
  	

  	<!-- 게시물 파일 등록 -->
  	<insert id="insertBoardFile">
  		insert into board_file 
  		values(
	  		board_file_seq.nextval,
	  		#{boardNo},
	  		#{filename},
	  		#{filepath}
  		)
  	</insert>
  	
  	<!-- 파일 조회 -->
	<select id="getBoardFile" resultType="boardFile">
		select * from board_file where board_file_no=#{boardFileNo}
	</select>
	
	<!-- 게시물 삭제 -->
	<delete id="deleteBoard">
		delete from board where board_no=#{boardNo}
	</delete>
	
	<!-- 게시물 수정 -->
	<update id="updateBoard">
		update board set 
			board_title=#{boardTitle},
			board_content=#{boardContent},
			board_category=#{boardCategory}
			where board_no=#{boardNo}
	</update>
	
	<!-- 파일 여러개 조회 -->
	<select id="selectBoardFile" resultType="boardFile">
		select * from board_file
		where board_file_no in
		<foreach collection="array" item="boardFileNo" open="(" close=")" separator=",">
			#{boardFileNo}
		</foreach>
	</select>
	
	<!-- 파일 삭제 -->
	<delete id="deleteBoardFile">
		delete from board_file
		where board_file_no in
		<foreach collection="array" item="boardFileNo" open="(" close=")" separator=",">
			#{boardFileNo}
		</foreach>
	</delete>
	
	<!-- 게시물 좋아요 등록 -->
	<insert id="insertLike">
        insert into board_like (user_nick, board_no)
        values (
	       	 #{userNick},
	         #{boardNo}
         )
    </insert>
    
	<!-- 게시물 좋아요 수 증가 -->
    <update id="incrementLikeCount">
        update board
        set like_count = like_count + 1
        where board_no = #{boardNo}
    </update>
    
 	<!-- 게시물 좋아요 취소 -->
    <delete id="deleteLike">
        delete from board_like
        where user_nick = #{userNick} and board_no = #{boardNo}
    </delete>


	<!-- 게시물 좋아요 수 감소 -->
    <update id="decrementLikeCount">
        update board
        set like_count = like_count - 1
        where board_no = #{boardNo}
    </update>
	
	<!-- 좋아요 상태 조회 -->
	<select id="selectLike" resultType="string">
        select user_nick
        from board_like
        where user_nick = #{userNick} and board_no = #{boardNo}
    </select>
	
	
	<!-- 댓글 등록 -->
	 <insert id="addComment">
		insert into board_comment 
		values (
			board_comment_seq.nextval,
			#{boardRef},
			#{boardCommentWriter},
			#{boardCommentContent},
			to_char(sysdate, 'yyyy-mm-dd')
		)
	</insert>
	
	<!-- 댓글 목록 조회 -->
	<select id="getComments" resultType="boardComment">
		select * from board_comment 
		where board_ref = #{boardRef} order by board_comment_no
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteComment">
		delete from board_comment 
		where board_comment_no = #{boardCommentNo}
	</delete> 
	
	<!-- 댓글 수정 -->
	<update id="updateComment">
    	update board_comment
    	set board_comment_content = #{boardCommentContent}
    	where board_ref = #{boardNo} and board_comment_no = #{commentNo}
	</update>
	
	<!-- 신고 -->
	<insert id="boardViewReport">
		insert into board_report 
		values (
			#{userNick},
			#{boardNo}
		)
	</insert>
	 
	 <!-- 오건하 작성 -->
	 <select id="reportTotalCount" resultType="int">
		select count(*) as total
		from (
		    select board_no
		    from board_report
		    group by board_no
		    having count(*) >= 3
		) subquery
	 </select>
	 
	 <!-- 오건하 작성 2024-10-04 -->
	 <select id="selectReportBoard" resultType="board">
			select * 
			from (
			    select rownum as rnum, result.* 
			    from (
			        select 
			            b.board_no, 
			            b.board_title, 
			            b.board_writer, 
			            to_char(b.board_date,'yyyy-mm-dd') as board_date,
			            b.board_status, 
			            count(br.board_no) as report_count
			        from board_report br
			        inner join board b 
			            on br.board_no = b.board_no
			        group by 
			            b.board_no, 
			            b.board_title, 
			            b.board_writer, 
			            b.board_date,
			            b.board_status
			        having count(br.board_no) >= 3
			        order by b.board_no desc
			    ) result
			    where rownum &lt; #{end}
			) 
			where rnum >= #{start}
	 </select>
	 <!-- 오건하 작성 2024-10-04 -->
	 <update id="updateBoardStatus">
	 	update board set board_status = 0 where board_no = #{boardNo}
	 </update>
	 <!-- 오건하 작성 2024-10-04 -->
	 <select id="myBoardTotalCount" resultType="int">
	 	select count(*) from board where board_writer = #{userNick}
	 </select>
	 <!-- 오건하 작성 2024-10-04 -->
	 <select id="selectMyBoardList" resultType="board">
	 	select * from 
	  		(select rownum as rnum, b.* from 
	  			(select 
	  				board_no,
	  				board_writer,
	  				board_title,
	  				like_count,
	  				board_category,
	  				to_char(board_date,'yyyy-mm-dd') as board_date
	  				from board where board_status = 1 order by board_no desc)b) 
	  				where (rnum between #{start} and #{end}) and board_writer = #{userNick}
	 </select>	 
</mapper>
























