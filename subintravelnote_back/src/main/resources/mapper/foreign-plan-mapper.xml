<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="kr.co.iei.foreignPlan.model.dao.ForeignPlanDao">

	<!-- <select id="selectRegionList" resultType="foreignRegion"> select * 
		from (select rownum as rnum, r.* from (select * from region ] where country_name 
		!= '한국' order by region_no desc)r) where rnum between #{startNum} and #{endNum} 
		</select> -->

	<select id="getTotalCount" resultType="int">
		select count(*) from region
		where country_name != '대한민국'
		<if test="searchInput != ''">
			and (country_name like '%' || #{searchInput}|| '%' or
			region_name like '%' || #{searchInput}|| '%')
		</if>
	</select>

	<select id="selectRegionList" resultType="foreignRegion">
		select * from (select rownum as rnum, r.* from
		(select * from region
		where country_name != '대한민국'
		<if test="searchInput != ''">
			and ((region_name = #{searchInput} or country_name = #{searchInput})
			or (country_name like '%' || #{searchInput}|| '%' or region_name like
			'%' || #{searchInput}|| '%'))
		</if>
		)r)
		where rnum between #{startNum} and #{endNum}
	</select>

	<select id="selectOneRegion" resultType="foreignRegion">
		select r.*, time_zone,
		currency_code, region_latitude, region_longitude from (region)r left
		join (region_info)i on r.region_no = i.region_no where r.region_no =
		#{regionNo}
	</select>

	<insert id="insertItinerary">
		insert into itinerary values(itinerary_no_seq.nextval, (select user_no
		from user_tbl where user_email = #{userEmail}), #{regionNo},
		#{itineraryStartDate}, #{itineraryEndDate}, #{itineraryTitle})
		<selectKey resultType="int" keyProperty="itineraryNo"
			order="AFTER">
			select max(itinerary_no) from itinerary
		</selectKey>
	</insert>

	<select id="selectOneItinerary"
		resultType="foreignItineraryInfo">
		select i.*, region_name, country_name from
		(select itinerary_no, region_no, itinerary_start_date, itinerary_end_date,
		itinerary_title from itinerary where itinerary_no = #{itineraryNo})i
		join (region)r on i.region_no = r.region_no
	</select>

	<select id="selectPlanList" resultType="foreignPlan">
		select * from plan where
		itinerary_no = #{itineraryNo} and plan_day = #{planDay}
		order by plan_seq
	</select>

	<update id="updatePlanInfo">
		update plan set plan_memo = #{planMemo}, plan_time =
		#{planTime} where plan_no = #{planNo}
	</update>

	<insert id="insertPlan">
		<selectKey resultType="int" keyProperty="planSeq" order="BEFORE">
			select coalesce(max(plan_seq) + 1, 1) from plan where itinerary_no = #{itineraryNo} and plan_day = #{planDay}
		</selectKey>
		insert into plan values(plan_no_seq.nextval, #{itineraryNo}, #{planDay}, #{planDate}, #{planSeq}, #{planAddress}, #{planLatitude}, #{planLongitude}, #{planTime}, #{planMemo}, #{planImage}, 1, #{planName}, #{planId})
	</insert>
	
	<delete id="deletePlan">
		delete from plan where plan_no = #{planNo}
	</delete>
	
	<select id="selectChangeList" resultMap="getChangeList">
		select plan_no, itinerary_no, plan_day, plan_seq from plan where plan_no = #{planNo}
	</select>
	
	<resultMap id="getChangeList" type="foreignPlan">
		<collection property="changeSeqList" select="selectChangeSeqPlan" column="{itineraryNo=itinerary_no, planDay=plan_day, planSeq=plan_seq}" javaType="java.util.List" ofType="foreignPlanChangeSeq"/>
	</resultMap>
	
	<select id="selectChangeSeqPlan" resultType="foreignPlanChangeSeq">
		select plan_no, itinerary_no, plan_day, plan_seq from plan where itinerary_no = #{itineraryNo} and plan_day = #{planDay} and plan_seq > #{planSeq}
	</select>
	
	<update id="changeSeq">
		update plan set plan_seq = plan_seq - 1 where plan_no = #{planNo}
	</update>
	
	<update id="updateItinerary">
		update itinerary set itinerary_title = #{itineraryTitle}, itinerary_start_date = #{itineraryStartDate}, itinerary_end_date = #{itineraryEndDate} where itinerary_no = #{itineraryNo}
	</update>
	
	<select id="selectTotalPlanCount" resultType="int">
		select count(*) from plan where itinerary_no = #{itineraryNo}
	</select>
	
	<delete id="deleteItinerary">
		delete from itinerary where itinerary_no = #{itineraryNo}
	</delete>
	
	<insert id="insertCompanion">
		insert into companion values(companion_no_seq.nextval, #{itineraryNo}, (select user_no from user_tbl where user_email = #{memberEmail}))
	</insert>
	
	<select id="checkUser" resultType="int">
		select count(*) from itinerary where itinerary_no = #{itineraryNo} and user_no = (select user_no from user_tbl where user_email = #{userEmail})
	</select>
	
	<select id="checkCompanion" resultType="int">
		select count(*) from companion where itinerary_no = #{itineraryNo} and user_no = (select user_no from user_tbl where user_email = #{userEmail})
	</select>
	
	<update id="changePrevSeqDown">
		update plan set plan_seq = plan_seq + 1 where plan_no = 
												(select plan_no from plan 
												where itinerary_no = (select itinerary_no from plan where plan_no = #{planNo})
												and plan_day = (select plan_day from plan where plan_no = #{planNo})
												and plan_seq = (select plan_seq from plan where plan_no = #{planNo}) - 1)
	</update>

	<update id="changeSeqUp">
		update plan set plan_seq = plan_seq - 1 where plan_no = #{planNo}
	</update>
	
	<update id="changeNextSeqUp">
		update plan set plan_seq = plan_seq - 1 where plan_no = 
												(select plan_no from plan 
												where itinerary_no = (select itinerary_no from plan where plan_no = #{planNo})
												and plan_day = (select plan_day from plan where plan_no = #{planNo})
												and plan_seq = (select plan_seq from plan where plan_no = #{planNo}) + 1)
	</update>
	
	<update id="changeSeqDown">
		update plan set plan_seq = plan_seq + 1 where plan_no = #{planNo}
	</update>
	
</mapper>
